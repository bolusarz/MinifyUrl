// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bolusarz/urlmini/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/bolusarz/urlmini/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/bolusarz/urlmini/db/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BlockSession mocks base method.
func (m *MockStore) BlockSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockStoreMockRecorder) BlockSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockStore)(nil).BlockSession), arg0, arg1)
}

// CreateLink mocks base method.
func (m *MockStore) CreateLink(arg0 context.Context, arg1 db.CreateLinkParams) (db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockStoreMockRecorder) CreateLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockStore)(nil).CreateLink), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetActiveSessions mocks base method.
func (m *MockStore) GetActiveSessions(arg0 context.Context, arg1 db.GetActiveSessionsParams) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSessions indicates an expected call of GetActiveSessions.
func (mr *MockStoreMockRecorder) GetActiveSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSessions", reflect.TypeOf((*MockStore)(nil).GetActiveSessions), arg0, arg1)
}

// GetLinkByCode mocks base method.
func (m *MockStore) GetLinkByCode(arg0 context.Context, arg1 string) (db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByCode", arg0, arg1)
	ret0, _ := ret[0].(db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByCode indicates an expected call of GetLinkByCode.
func (mr *MockStoreMockRecorder) GetLinkByCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByCode", reflect.TypeOf((*MockStore)(nil).GetLinkByCode), arg0, arg1)
}

// GetLinkById mocks base method.
func (m *MockStore) GetLinkById(arg0 context.Context, arg1 int64) (db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkById", arg0, arg1)
	ret0, _ := ret[0].(db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkById indicates an expected call of GetLinkById.
func (mr *MockStoreMockRecorder) GetLinkById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkById", reflect.TypeOf((*MockStore)(nil).GetLinkById), arg0, arg1)
}

// GetLinks mocks base method.
func (m *MockStore) GetLinks(arg0 context.Context, arg1 db.GetLinksParams) ([]db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", arg0, arg1)
	ret0, _ := ret[0].([]db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockStoreMockRecorder) GetLinks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockStore)(nil).GetLinks), arg0, arg1)
}

// GetLinksByUser mocks base method.
func (m *MockStore) GetLinksByUser(arg0 context.Context, arg1 db.GetLinksByUserParams) ([]db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinksByUser indicates an expected call of GetLinksByUser.
func (mr *MockStoreMockRecorder) GetLinksByUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksByUser", reflect.TypeOf((*MockStore)(nil).GetLinksByUser), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetSessions mocks base method.
func (m *MockStore) GetSessions(arg0 context.Context, arg1 db.GetSessionsParams) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessions indicates an expected call of GetSessions.
func (mr *MockStoreMockRecorder) GetSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessions", reflect.TypeOf((*MockStore)(nil).GetSessions), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// ToggleStatus mocks base method.
func (m *MockStore) ToggleStatus(arg0 context.Context, arg1 db.ToggleStatusParams) (db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleStatus indicates an expected call of ToggleStatus.
func (mr *MockStoreMockRecorder) ToggleStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatus", reflect.TypeOf((*MockStore)(nil).ToggleStatus), arg0, arg1)
}

// UpdateCode mocks base method.
func (m *MockStore) UpdateCode(arg0 context.Context, arg1 db.UpdateCodeParams) (db.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCode", arg0, arg1)
	ret0, _ := ret[0].(db.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCode indicates an expected call of UpdateCode.
func (mr *MockStoreMockRecorder) UpdateCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCode", reflect.TypeOf((*MockStore)(nil).UpdateCode), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
